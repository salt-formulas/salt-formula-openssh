{%- from "openssh/map.jinja" import server with context %}

# Package generated configuration file
# See the sshd_config(5) manpage for details

{%- if server.binds is defined %}
{%- for bind in server.binds %}
ListenAddress {{ bind.address|default("0.0.0.0") }}:{{ bind.port|default("22") }}
{%- endfor %}
{%- else %}
# What ports, IPs and protocols we listen for
Port {{ server.bind.port }}

# Use these options to restrict which interfaces/protocols sshd will bind to
ListenAddress {{ server.bind.address }}
{%- endif %}

Protocol {{ server.get('protocol', 2) }}

# HostKeys for protocol version 2
HostKey /etc/ssh/ssh_host_ed25519_key
HostKey /etc/ssh/ssh_host_rsa_key
{%- if server.get('dsa_enabled', false) %}
HostKey /etc/ssh/ssh_host_dsa_key
{%- endif %}
{%- if grains.os_family != 'CentOS' %}
HostKey /etc/ssh/ssh_host_ecdsa_key
{%- endif %}

#Privilege Separation is turned on for security
UsePrivilegeSeparation yes

{%- if server.get('kex_algorithms', False) %}
KexAlgorithms {{ server.kex_algorithms|join(',') }}
{%- else %}
KexAlgorithms curve25519-sha256@libssh.org,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256,diffie-hellman-group-exchange-sha256
{%- endif %}
{%- if server.get('ciphers', False) %}
Ciphers {{ server.ciphers|join(',') }}
{%- else %}
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
{%- endif %}
{%- if server.get('macs', False) %}
MACs {{ server.macs|join(',') }}
{%- else %}
MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,umac-128@openssh.com
{%- endif %}

# Lifetime and size of ephemeral version 1 server key
KeyRegenerationInterval 3600
ServerKeyBits {{ server.get('server_key_bits', '2048') }}

# Logging
SyslogFacility {{ server.get('syslog_facility', 'AUTH')|upper }}

LogLevel {{ server.get('log_level', 'INFO')|upper }}

LoginGraceTime {{ server.get('login_grace_time', 120) }}

{%- set permit_root_login = server.get('permit_root_login', 'no') %}
{%- if permit_root_login not in ('yes', 'no', 'prohibit-password',
                                 'without-password', 'forced-commands-only') %}
{# permit_root_login might be boolean for historical reasons #}
{%- set permit_root_login = {True: 'yes', False: 'no'}.get(permit_root_login, 'no') %}
{%- endif %}
PermitRootLogin {{ permit_root_login }}

StrictModes yes

RSAAuthentication yes

PubkeyAuthentication {{ 'yes' if server.get('public_key_auth', True) else 'no' }}
AuthorizedKeysFile     %h/.ssh/authorized_keys

{%- if server.authorized_keys_command is defined %}
AuthorizedKeysCommand {{ server.authorized_keys_command.command }}
{% if (grains['os_family'] == 'RedHat' and grains['osmajorrelease'] != '6') or grains['os_family'] != 'RedHat' %}
{%- if server.authorized_keys_command.user is defined %}
AuthorizedKeysCommandUser {{ server.authorized_keys_command.get('User', 'nobody') }}
{%- endif %}
{%- endif %}
{%- endif %}

{%- if server.force_command is defined %}
ForceCommand {{ server.force_command }}
{%- endif %}

{% if server.get('deny_users', False) %}
DenyUsers {{ server.deny_users|join(' ') }}
{% endif %}
{% if server.get('allow_users', False) %}
AllowUsers {{ server.allow_users|join(' ') }}
{% endif %}
{% if server.get('deny_groups', False) %}
DenyGroups {{ server.deny_groups|join(' ') }}
{% endif %}
{% if server.get('allow_groups', False) %}
AllowGroups {{ server.allow_groups|join(' ') }}
{% endif %}

IgnoreRhosts {{ 'yes' if server.get('ignore_rhosts', True) else 'no' }}

# For this to work you will also need host keys in /etc/ssh_known_hosts
RhostsRSAAuthentication no
# similar for protocol version 2

HostbasedAuthentication {{ 'yes' if server.get('host_auth', False) else 'no' }}

# Uncomment if you don't trust ~/.ssh/known_hosts for RhostsRSAAuthentication
#IgnoreUserKnownHosts yes

# To enable empty passwords, change to yes (NOT RECOMMENDED)
PermitEmptyPasswords {{ 'yes' if server.get('permit_empty_passwords', False) else 'no' }}

PermitUserEnvironment {{ 'yes' if server.get('permit_user_environment', False) else 'no' }}

# Change to yes to enable challenge-response passwords (beware issues with
# some PAM modules and threads)
ChallengeResponseAuthentication no

# Change to no to disable tunnelled clear text passwords
PasswordAuthentication {{ 'yes' if server.get('password_auth', True) else 'no' }}

# Kerberos options
{%- if server.get('kerberos_auth', False) %}
KerberosAuthentication yes
{%- else %}
KerberosAuthentication no
{%- endif %}
#KerberosGetAFSToken no
#KerberosOrLocalPasswd yes
#KerberosTicketCleanup yes

# GSSAPI options
{%- if server.get('gssapi_auth', False) %}
GSSAPIAuthentication yes
{%- else %}
GSSAPIAuthentication no
{%- endif %}
#GSSAPICleanupCredentials yes

{%- if server.use_dns is defined %}
UseDNS {{ server.use_dns }}
{%- endif %}

X11Forwarding {{ 'yes' if server.get('x11', {}).get('forwarding', True) else 'no' }}
X11DisplayOffset {{ server.get('x11', {}).get('display_offset', '10') }}
PrintMotd {% if server.get('print_motd', False) %}yes{% else %}no{% endif %}
PrintLastLog {% if server.get('print_lastlog', True) %}yes{% else %}no{% endif %}
TCPKeepAlive {{ server.get('alive', {}).get('keep','yes') }}
#UseLogin no

{%- if server.get('alive', {'interval': None}).interval is number %}
ClientAliveInterval {{ server.alive.interval }}
{% endif %}

{%- if server.get('alive', {'count': None}).count is number %}
ClientAliveCountMax {{ server.alive.count }}
{% endif %}

{%- if server.max_sessions is defined %}
MaxSessions {{ server.max_sessions }}
{%- else %}
MaxSessions 10
{%- endif %}
{%- if server.max_startups is defined %}
MaxStartups {{ server.max_startups }}
{%- else %}
#MaxStartups 10:30:60
{%- endif %}

{%- if server.max_auth_tries is defined %}
MaxAuthTries {{ server.max_auth_tries }}
{%- endif %}

{%- if server.banner is defined %}
# CIS 5.2.15 requires Banner option configured. It also proposes
# file name '/etc/issue.net' as a solution, if Banner is not configured.
# WARNING: Some security scanners accepts only '/etc/issue.net'
# as a valid banner file name, so please do not change it.
Banner /etc/issue.net
{%- endif %}

# Allow client to pass locale environment variables
AcceptEnv LANG LC_*
{%- if server.get('accept_env', [])|length > 0 %}
AcceptEnv {{ server.accept_env|join(' ') }}
{%- endif %}

Subsystem sftp {{ server.lib_dir }}/sftp-server

# Set this to 'yes' to enable PAM authentication, account processing,
# and session processing. If this is enabled, PAM authentication will
# be allowed through the ChallengeResponseAuthentication and
# PasswordAuthentication.  Depending on your PAM configuration,
# PAM authentication via ChallengeResponseAuthentication may bypass
# the setting of "PermitRootLogin without-password".
# If you just want the PAM account and session checks to run without
# PAM authentication, then enable this but set PasswordAuthentication
# and ChallengeResponseAuthentication to 'no'.
UsePAM yes

{%- if server.get('dss_enabled', false) %}
PubkeyAcceptedKeyTypes=+ssh-dss
{%- endif %}

{%- if server.get('mac_algorithms', False) %}
{%- set supported_macs = ('hmac-md5',
                          'hmac-md5-96',
                          'hmac-ripemd160',
                          'hmac-sha1',
                          'hmac-sha1-96',
                          'hmac-sha2-256',
                          'hmac-sha2-512',
                          'umac-64@openssh.com',
                          'umac-128@openssh.com',
                          'hmac-md5-etm@openssh.com',
                          'hmac-md5-96-etm@openssh.com',
                          'hmac-ripemd160-etm@openssh.com',
                          'hmac-sha1-etm@openssh.com',
                          'hmac-sha1-96-etm@openssh.com',
                          'hmac-sha2-256-etm@openssh.com',
                          'hmac-sha2-512-etm@openssh.com',
                          'umac-64-etm@openssh.com',
                          'umac-128-etm@openssh.com') %}
{%- set mac_algorithms = [] %}
{%- for k, v in server.mac_algorithms.items() %}
{%- set _ = mac_algorithms.append(k) if v.get('enabled', False) and k in supported_macs %}
{%- endfor %}
{%- if mac_algorithms|length >0 %}
MACs {{ mac_algorithms|join(',') }}
{%- endif %}
{%- endif %}

